#include <GL/glut.h>
#include <iostream>
// using namespace std;

float x1 = 100, y1 = 150, x2 = 500, y2 = 150;
int n = 4;

void koch(float x1, float y1, float x2, float y2, int n) {
	if (n == 0) {
        glBegin(GL_LINES);
        glVertex2f(x1, y1);
        glVertex2f(x2, y2);
        glEnd();
	}

	else {

        float x3 = (x1 * 2.0 + x2)/3.0f;
        float y3 = (y1 * 2.0 + y2)/3.0f;

        float x4 = (x1 + 2.0 * x2)/3.0f;
        float y4 = (y1 + 2.0 * y2)/3.0f;

        float x = x3 + 0.5 * (x4 - x3) - 0.8665 * (y4 - y3);
        float y = y3 + 0.8665 * (x4 - x3) + 0.5 * (y4 - y3);

        koch(x1, y1, x3, y3, n - 1);
        koch(x3, y3, x, y, n - 1);
        koch(x, y, x4, y4, n - 1);
        koch(x4, y4, x2, y2, n - 1);
    }
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0.0f, 1.0f, 1.0f);
    koch(x1,y1,x2,y2,n);
    
    // // Define 3 points of equilateral triangle
    // float ax = 300, ay = 100;
    // float bx = 200, by = 300;
    // float cx = 400, cy = 300;

    // // Draw Koch on all 3 sides
    // koch(ax, ay, bx, by, n);
    // koch(bx, by, cx, cy, n);
    // koch(cx, cy, ax, ay, n);

    glFlush();
}



void init() {
    glClearColor(0, 0, 0, 0);
    gluOrtho2D(0, 640, 0, 480);
}

int main(int argc, char** argv) {

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(240, 180);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Koch Curve");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
