#include <GL/glut.h>
 int ww = 600, wh = 500;
 // Colors
 float boundaryFillCol[3] = {1.0, 0.0, 0.0}; // Red fill
 float borderCol[3] = {0.0, 0.0, 1.0};       // Blue border
 float floodFillCol[3] = {0.0, 1.0, 0.0};    // Green fill
 float bgCol[3] = {1.0, 1.0, 1.0};           // White background
 int fillType = 1; // 1 = boundary fill, 2 = flood fill
 void setPixel(int x, int y, float color[3]) {
    glColor3fv(color);
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
    glFlush();
 }
 void getPixel(int x, int y, float color[3]) {
    glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, color);
 }
 void drawPolygon() {
    glColor3f(0.0, 0.0, 1.0); // Blue border
    glBegin(GL_LINE_LOOP);
    glVertex2i(100, 100);
    glVertex2i(200, 100);
    glVertex2i(200, 200);
    glVertex2i(100, 200);
    glEnd();
    glFlush();
 }
 void boundaryFill4(int x, int y, float fillColor[3], float borderColor[3]) {
    float interiorColor[3];
    getPixel(x, y, interiorColor);
    if ((interiorColor[0] != borderColor[0] || interiorColor[1] != borderColor[1] 
|| interiorColor[2] != borderColor[2]) &&
        (interiorColor[0] != fillColor[0] || interiorColor[1] != fillColor[1] || 
interiorColor[2] != fillColor[2])) {
        setPixel(x, y, fillColor);
        boundaryFill4(x + 1, y, fillColor, borderColor);
        boundaryFill4(x - 1, y, fillColor, borderColor);
        boundaryFill4(x, y + 1, fillColor, borderColor);
        boundaryFill4(x, y - 1, fillColor, borderColor);
    }
 }
void floodFill4(int x, int y, float fillColor[3], float oldColor[3]) {
    float interiorColor[3];
    getPixel(x, y, interiorColor);
    if ((interiorColor[0] == oldColor[0] && interiorColor[1] == oldColor[1] && 
interiorColor[2] == oldColor[2]) &&
        (interiorColor[0] != fillColor[0] || interiorColor[1] != fillColor[1] || 
interiorColor[2] != fillColor[2])) {
        setPixel(x, y, fillColor);
        floodFill4(x + 1, y, fillColor, oldColor);
        floodFill4(x - 1, y, fillColor, oldColor);
        floodFill4(x, y + 1, fillColor, oldColor);
        floodFill4(x, y - 1, fillColor, oldColor);
    }
 }
 void mouse(int btn, int state, int x, int y) {
    if (btn == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        int xi = x;
        int yi = wh - y; // Invert Y for OpenGL
        if (fillType == 1) {
            boundaryFill4(xi, yi, boundaryFillCol, borderCol);
        } else if (fillType == 2) {
            float oldColor[3];
            getPixel(xi, yi, oldColor);
            floodFill4(xi, yi, floodFillCol, oldColor);
        }
    }
 }
 void display() {
    glClearColor(1.0, 1.0, 1.0, 1.0); // White background
    glClear(GL_COLOR_BUFFER_BIT);
    drawPolygon();
    glFlush();
 }
 void myinit() {
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, ww, 0, wh);
 }
 void menu(int option) {
    if (option == 1)
        fillType = 1;
    else if (option == 2)
        fillType = 2;
 }
int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(ww, wh);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Boundary-Fill & Flood-Fill");
    glutDisplayFunc(display);
    myinit();
    glutMouseFunc(mouse);
    glutCreateMenu(menu);
    glutAddMenuEntry("Boundary Fill", 1);
    glutAddMenuEntry("Flood Fill", 2);
    glutAttachMenu(GLUT_RIGHT_BUTTON);
    glutMainLoop();
    return 0;
 }