#include <GL/glut.h>

float controlPoints[4][2] = {
    {50.0, 200.0},  
    {150.0, 300.0},  
    {350.0, 100.0},  
    {450.0, 200.0}   
};
void drawBezierCurve() {
    glColor3f(1.0, 0.0, 1.0);
    glBegin(GL_LINE_STRIP);
    for (float t = 0.0; t <= 1.0; t += 0.001) {
        float x = (1 - t) * (1 - t) * (1 - t) * controlPoints[0][0] +
                  3 * t * (1 - t) * (1 - t) * controlPoints[1][0] +
                  3 * t * t * (1 - t) * controlPoints[2][0] +
                  t * t * t * controlPoints[3][0];
        float y = (1 - t) * (1 - t) * (1 - t) * controlPoints[0][1] +
                  3 * t * (1 - t) * (1 - t) * controlPoints[1][1] +
                  3 * t * t * (1 - t) * controlPoints[2][1] +
                  t * t * t * controlPoints[3][1];
        glVertex2f(x, y);
    }
    glEnd();
}

void drawControlPoints() {
    glPointSize(4.0);
    glColor3f(0.0, 0.0, 1.0);
    glBegin(GL_POINTS);
    for (int i = 0; i < 4; i++) {
     glVertex2f(controlPoints[i][0], controlPoints[i][1]);
    }

    glEnd();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    drawControlPoints();
    drawBezierCurve();
    glFlush();
}

void init() {
    glClearColor(1.0, 1.0, 1.0, 1.0);
    gluOrtho2D(0.0, 500.0, 0.0, 500.0);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Bezier Curve");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
