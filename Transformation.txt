#include <GL/glut.h> 
#include <math.h> 
 
int triangle[3][2] = { 
    {100, 100}, 
    {200, 100}, 
    {150, 200} 
}; 
 
void drawTriangle() 
{ 
    glBegin(GL_TRIANGLES); 
    for(int i = 0; i < 3; i++) 
        glVertex2i(triangle[i][0], triangle[i][1]); 
    glEnd(); 
} 
 
void drawAxes() 
{ 
    glColor3f(0.0, 0.0, 0.0); // Black color for axes 
    glBegin(GL_LINES); 
        // X-axis 
        glVertex2i(-500, 0); 
        glVertex2i(500, 0); 
 
        // Y-axis 
        glVertex2i(0, -500); 
        glVertex2i(0, 500); 
    glEnd(); 
} 
 
void scaleObject(float sx, float sy) 
{ 
    for(int i = 0; i < 3; i++) 
    { 
        triangle[i][0] = (int)(triangle[i][0] * sx); 
        triangle[i][1] = (int)(triangle[i][1] * sy); 
    } 
} 
 
void rotateObject(float angle, int px, int py) 
{ 
    float rad = angle * 3.14159f / 180.0f; 
    for(int i = 0; i < 3; i++) 
    { 
        int x = triangle[i][0] - px; 
        int y = triangle[i][1] - py; 
        triangle[i][0] = px + (int)(x * cos(rad) - y * sin(rad)); 
        triangle[i][1] = py + (int)(x * sin(rad) + y * cos(rad)); 
    } 
} 
 
void reflectObject(char axis) 
{ 
    for(int i = 0; i < 3; i++) 
    { 
        if(axis == 'x') 
            triangle[i][1] = -triangle[i][1]; 
        else if(axis == 'y') 
            triangle[i][0] = -triangle[i][0]; 
        else if(axis == 'o') 
        { 
            triangle[i][0] = -triangle[i][0]; 
            triangle[i][1] = -triangle[i][1]; 
        } 
    } 
} 
 
void display() 
{ 
    glClear(GL_COLOR_BUFFER_BIT); 
     
    drawAxes(); // Draw axes 
     
    glColor3f(0.0, 0.0, 1.0); // Blue triangle 
    drawTriangle(); 
     
    glFlush(); 
} 
 
void keyboard(unsigned char key, int x, int y) 
{ 
    switch(key) 
    { 
        case 's': scaleObject(1.5f, 1.5f); break; 
        case 'r': rotateObject(45.0f, 150, 150); break; 
        case 'x': reflectObject('x'); break; 
        case 'y': reflectObject('y'); break; 
        case 'o': reflectObject('o'); break; 
    } 
    glutPostRedisplay(); 
} 
 
void init() 
{ 
    glClearColor(1.0, 1.0, 1.0, 1.0); 
    gluOrtho2D(-500, 500, -500, 500); 
} 
 
int main(int argc, char **argv) 
{ 
    glutInit(&argc, argv); 
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB); 
    glutInitWindowSize(600, 600); 
glutInitWindowPosition(100, 100); 
glutCreateWindow("2D Transformations - Triangle with glVertex2i"); 
init(); 
glutDisplayFunc(display); 
glutKeyboardFunc(keyboard); 
glutMainLoop(); 
return 0; 
} 